#version 450
#extension GL_EXT_mesh_shader : require

/* https://developer.nvidia.com/blog/introduction-turing-mesh-shaders/
	"We recommend using up to 64 vertices and 126 primitives"
*/
#include "node_mesh_constants.glsl"
#include "global_ubo.glsl"
#include "node_mesh_ubo.glsl"

layout(local_size_x = VERTEX_DIMENSION_COUNT, local_size_y = VERTEX_DIMENSION_COUNT, local_size_z = 1) in;
layout(triangles, max_vertices = VERTEX_COUNT, max_primitives = PRIMITIVE_COUNT) out;

layout(location = 0) out VertexOutput {
	vec4 color;
} vertexOutput[];

taskPayloadSharedEXT MeshTaskPayload payload;

#define quadsize 0.5
const vec4[] quadVerts = {
	vec4( -quadsize, quadsize, 0, 1),
	vec4( quadsize, quadsize, 0, 1),
	vec4( -quadsize, -quadsize, 0, 1),
	vec4( quadsize, -quadsize, 0, 1),
};

mat4 removeTranslation(mat4 value) {
	value[3] = vec4(0.0, 0.0, 0.0, value[3].w); // Set the fourth column to (0, 0, 0, w)
	return value;
}

vec4 ulClipPos, urClipPos, lrClipPos, llClipPos;
vec3 ulNDC, urNDC, lrNDC, llNDC;

// https://jcgt.org/published/0011/03/04/paper-lowres.pdf
float area(vec2 a, vec2 b) { return(a.x*b.y)-(a.y*b.x); }
vec2 barycentricQuadUV(vec2 ndc) {
	const float w[4] = { payload.ulClipPos.w, payload.urClipPos.w, payload.lrClipPos.w, payload.llClipPos.w };
	const vec2 v[4] = { payload.ulNDC.xy, payload.urNDC.xy, payload.lrNDC.xy, payload.llNDC.xy };
	float r[4], t[4], u[4], f[4];
	vec2 s[4];
	for (int i = 0; i < 4; i++) {
		s[i] = v[i] - ndc;
		r[i] = length(s[i]) * sign(w[i]);
	}
	for (int i = 0; i < 4; i++) {
		float A = area(s[i], s[(i + 1) % 4]);
		float D = dot(s[i], s[(i + 1) % 4]);
		t[i] = (r[i] * r[(i + 1) % 4] - D) / A;
	}
	for (int i = 0; i < 4; i++) {
		u[i] = (t[(i + 3) % 4] + t[i]) / r[i];
	}
	const vec4 wt = vec4(u[0], u[1], u[2], u[3]) / (u[0] + u[1] + u[2] + u[3]);
	for (int i = 0; i < 4; i++) {
		f[i] =  wt[i] / w[i];
	}
	const vec2 ulUV = vec2(0, 1), urUV = vec2(1, 1), lrUV = vec2(1, 0), llUV = vec2(0, 0);
	return (f[0] * ulUV + f[1] * urUV + f[2] * lrUV + f[3] * llUV) / (f[0] + f[1] + f[2] + f[3]);
}

void main()
{
	SetMeshOutputsEXT(VERTEX_COUNT, PRIMITIVE_COUNT);

	const vec2 screenSize = vec2(globalUBO.width, globalUBO.height);
	const vec2 uv = ((gl_GlobalInvocationID.xy - gl_WorkGroupID.xy) * SCALE) / screenSize;
	const vec2 invUv = vec2(uv.x, 1 - uv.y);
	const vec2 ndc = vec2((1, -1) * (uv * 2 - 1));

	const vec2 inQuadUv = barycentricQuadUV(ndc);

	const vec4 colorValue = texture(nodeColor, inQuadUv);
	const vec4 gbufferValue = texture(nodeGBuffer, inQuadUv);

	gl_MeshVerticesEXT[gl_LocalInvocationIndex].gl_Position = colorValue.a > 0 ?
																globalUBO.proj * globalUBO.view * gbufferValue :
																vec4(ndc, 1, 1);
	vertexOutput[gl_LocalInvocationIndex].color = colorValue;

	if (gl_LocalInvocationID.x < VERTEX_DIMENSION_COUNT - 1 && gl_LocalInvocationID.y < VERTEX_DIMENSION_COUNT - 1) {
		const uint yOffset = gl_LocalInvocationID.y * VERTEX_DIMENSION_COUNT;
		const uint offsetX = gl_LocalInvocationID.x + yOffset;
		const uint pi = (gl_LocalInvocationID.y * (VERTEX_DIMENSION_COUNT - 1)) + gl_LocalInvocationID.x;
		gl_PrimitiveTriangleIndicesEXT[pi] = uvec3(offsetX, offsetX + 1, offsetX + VERTEX_DIMENSION_COUNT);
		gl_PrimitiveTriangleIndicesEXT[pi + HALF_PRIMITIVE_COUNT] = uvec3(offsetX + 1, offsetX + VERTEX_DIMENSION_COUNT + 1, offsetX + VERTEX_DIMENSION_COUNT);
	}
}